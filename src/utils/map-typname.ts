import { ColumnType } from '../types/column-type.enum';

const TypMap: { [typName: string]: ColumnType } = {
  bigint: ColumnType.BIGINT,
  int8: ColumnType.BIGINT,
  bigserial: ColumnType.BIGSERIAL,
  serial8: ColumnType.BIGSERIAL,
  bit: ColumnType.BIT,
  'bit varying': ColumnType.BIT_VARYING,
  varbit: ColumnType.BIT_VARYING,
  bool: ColumnType.BOOLEAN,
  boolean: ColumnType.BOOLEAN,
  box: ColumnType.BOX,
  bytea: ColumnType.BYTEA,
  bpchar: ColumnType.CHAR,
  char: ColumnType.CHAR,
  character: ColumnType.CHAR,
  varchar: ColumnType.CHAR_VARYING,
  'character varying': ColumnType.CHAR_VARYING,
  cidr: ColumnType.CIDR,
  circle: ColumnType.CIRCLE,
  date: ColumnType.DATE,
  float8: ColumnType.DOUBLE,
  'double precision': ColumnType.DOUBLE,
  inet: ColumnType.INET,
  int: ColumnType.INTEGER,
  int4: ColumnType.INTEGER,
  integer: ColumnType.INTEGER,
  interval: ColumnType.INTERVAL,
  json: ColumnType.JSON,
  jsonb: ColumnType.JSONB,
  line: ColumnType.LINE,
  lseg: ColumnType.LSEG,
  macaddr: ColumnType.MACADDR,
  macaddr8: ColumnType.MACADDR8,
  money: ColumnType.MONEY,
  decimal: ColumnType.NUMERIC,
  numeric: ColumnType.NUMERIC,
  path: ColumnType.PATH,
  pg_lsn: ColumnType.PG_LSN,
  pg_snapshot: ColumnType.PG_SNAPSHOT,
  point: ColumnType.POINT,
  polygon: ColumnType.POLYGON,
  real: ColumnType.REAL,
  float4: ColumnType.REAL,
  int2: ColumnType.SMALLINT,
  smallint: ColumnType.SMALLINT,
  serial2: ColumnType.SMALLSERIAL,
  smallserial: ColumnType.SMALLSERIAL,
  serial: ColumnType.SERIAL,
  serial4: ColumnType.SERIAL,
  text: ColumnType.TEXT,
  time: ColumnType.TIME,
  'time without time zone': ColumnType.TIME,
  timetz: ColumnType.TIME_WITH_TIMEZONE,
  'time with time zone': ColumnType.TIME_WITH_TIMEZONE,
  timestamp: ColumnType.TIMESTAMP,
  'timestamp without time zone': ColumnType.TIMESTAMP,
  timestamptz: ColumnType.TIMESTAMP_WITH_TIMEZONE,
  'timestamp with time zone': ColumnType.TIMESTAMP_WITH_TIMEZONE,
  tsquery: ColumnType.TSQUERY,
  tsvector: ColumnType.TSVECTOR,
  txid_snapshot: ColumnType.TXID_SNAPSHOT,
  uuid: ColumnType.UUID,
  xml: ColumnType.XML,
};

// Maps native type alieses to their full names
export const mapTypname = (typname: string): ColumnType => TypMap[typname];
